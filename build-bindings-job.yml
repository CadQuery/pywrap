parameters:
  name: 'Generate bindings'
  vmImage: 'Ubuntu-20.04'
  py_maj: '3'
  py_min: '7'
  config_file: 'ocp.toml'
  conda_bld: '3.16.3'
  conda_env_file: 'env.yml'
  CXX: g++-8

jobs:
- job: ${{ parameters.name }}
  timeoutInMinutes: 360
  pool:
    vmImage: ${{ parameters.vmImage }}
  variables:
    n_cores: 2
    ${{ if contains(parameters.vmImage, 'win') }}:
      include_dir: '${CONDA_PREFIX}/Library/include'
    ${{ if not(contains(parameters.vmImage, 'win')) }}:
      include_dir: '${CONDA_PREFIX}/include'
  steps:
  - ${{ if contains(parameters.vmImage, 'Ubuntu') }}:
    - bash: |
        sudo apt-get update &&
        sudo apt-get install ${{ parameters.CXX }} mesa-common-dev libgl1-mesa-dev libglu1-mesa-dev freeglut3-dev
      displayName: 'Install g++8 and gl headers'

  - ${{ if contains(parameters.vmImage, 'mac') }}:
    - bash: |
        ln -s "$(xcrun --sdk macosx --show-sdk-path)/System/Library/Frameworks/OpenGL.framework/Headers" /usr/local/include/OpenGL
      displayName: 'Find GL headers'

  - template: conda-enable.yml@templates
    parameters:
      vmImage: ${{ parameters.vmImage }}

  - bash: |
      conda env create -f ${{ parameters.conda_env_file }} && \
      conda install -n cpp-py-bindgen -y python=${{ parameters.py_maj }}.${{ parameters.py_min }}
    displayName: 'Prepare conda environment'

  - bash: |
      source activate cpp-py-bindgen && \
      conda info -a && \
      conda list && \
      which python && \
      env
    displayName: 'Conda env sanity checks'
    
  - ${{ if contains(parameters.vmImage, 'mac') }}:
    - bash: |
        source activate cpp-py-bindgen && \
        echo | clang -v -E -x c - && \
        cd $CONDA_PREFIX && \
        find . -name type_traits\* && \
        sudo find /usr/local/ -name type_traits\*
      displayName: 'Mac header check'

  - bash: |
      source activate cpp-py-bindgen &&
      python configure.py --input-folder "${{ variables.include_dir }}/opencascade"
    displayName: Configure generator

  - bash: |
      source activate cpp-py-bindgen && \
      OUTPUT=`python -c'import toml; print(toml.load("${{ parameters.config_file }}")["output_folder"])'`  && \
      echo $OUTPUT && \
      echo "##vso[task.setvariable variable=OUTPUT;isOutput=true]$OUTPUT"
    displayName: 'Read output dir from the config file'
    name: 'conf'

  - ${{ if contains(parameters.vmImage, 'Ubuntu') }}:
    - bash: |
        ls && env && \
        source activate cpp-py-bindgen && \
        python -m bindgen -n $(n_cores) -i "${{ variables.include_dir }}/" -i "${{ variables.include_dir }}/vtk-9.0/" -i $CONDA_PREFIX/lib/clang/10.0.1/include/ parse ${{ parameters.config_file }} out.pkl && \
        python -m bindgen -n $(n_cores) transform ${{ parameters.config_file }} out.pkl out_f.pkl && \
        python -m bindgen -n $(n_cores) generate ${{ parameters.config_file }} out_f.pkl
      displayName: 'Generate'
      env:
        PYTHONPATH: pywrap
  
  - ${{ if contains(parameters.vmImage, 'mac') }}:
    - bash: |
        ls && env && \
        source activate cpp-py-bindgen && \
        python -m bindgen -n $(n_cores) -i "${{ variables.include_dir }}/" -i "${{ variables.include_dir }}/vtk-9.0/" -i $CONDA_PREFIX/lib/clang/10.0.1/include/ -i $CONDA_PREFIX/include/c++/v1/ parse ${{ parameters.config_file }} out.pkl && \
        python -m bindgen -n $(n_cores) transform ${{ parameters.config_file }} out.pkl out_f.pkl && \
        python -m bindgen -n $(n_cores) generate ${{ parameters.config_file }} out_f.pkl
      displayName: 'Generate'
      env:
        PYTHONPATH: pywrap
  
  - ${{ if contains(parameters.vmImage, 'win') }}:
    - bash: |
        ls && env && \
        source activate cpp-py-bindgen && \
        python -m bindgen -n $(n_cores) -i "${{ variables.include_dir }}/" -i "${{ variables.include_dir }}/vtk-9.0/" -i "${{ variables.include_dir }}/clang/" parse ${{ parameters.config_file }} out.pkl && \
        python -m bindgen -n $(n_cores) transform ${{ parameters.config_file }} out.pkl out_f.pkl && \
        python -m bindgen -n $(n_cores) generate ${{ parameters.config_file }} out_f.pkl
      displayName: 'Generate'

  - task: CopyFiles@2
    inputs:
      contents: 'out*.pkl'
      targetFolder: $(conf.OUTPUT)
    displayName: 'Copy pkl outputs'
    
  - publish:  $(conf.OUTPUT)
    artifact: OCP_src_${{ parameters.vmImage }}

- job: ${{ parameters.name }}_${{ parameters.py_maj }}_${{ parameters.py_min }}
  timeoutInMinutes: 360
  dependsOn: ${{ parameters.name }} 
  pool:
    vmImage: ${{ parameters.vmImage }}
  variables:
    n_cores: 2
    OCP_src: OCP_src_${{ parameters.vmImage }}
  steps:
  - download: current
    artifact: OCP_src_${{ parameters.vmImage }}
    
  - ${{ if contains(parameters.vmImage, 'Ubuntu') }}:
    - bash: |
        sudo apt-get update &&
        sudo apt-get install ${{ parameters.CXX }} mesa-common-dev libgl1-mesa-dev libglu1-mesa-dev freeglut3-dev
      displayName: 'Install g++8 and gl headers'

  - ${{ if contains(parameters.vmImage, 'mac') }}:
    - bash: |
        sudo find /Library/Developer/CommandLineTools/SDKs/MacOSX10.15.sdk/System/Library/Frameworks/ && \
        ln -s "$(xcrun --sdk macosx --show-sdk-path)/System/Library/Frameworks/OpenGL.framework/Headers" /usr/local/include/OpenGL
      displayName: 'Search for GL'

  - ${{ if contains(parameters.vmImage, 'win') }}:
    - bash: ls "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build"
      displayName: 'Find vcvars64'

  - ${{ if contains(parameters.vmImage, 'win') }}:
    - script: |
        choco install --accept-license -y Ninja llvm
      displayName: 'Install clang'

  - template: conda-enable.yml@templates
    parameters:
      vmImage: ${{ parameters.vmImage }}

  - bash: |
      conda env create -f ${{ parameters.conda_env_file }}
    displayName: 'Prepare conda environment'

  - bash: |
      source activate cpp-py-bindgen && \
      conda info -a && \
      conda list && \
      which python && \
      env
    displayName: 'Conda env sanity checks'
    
  - ${{ if contains(parameters.vmImage, 'mac') }}:
    - bash: |
        source activate cpp-py-bindgen && \
        echo | clang -v -E -x c - && \
        cd $CONDA_PREFIX && \
        find . -name type_traits\* && \
        sudo find /usr/local/ -name type_traits\*
      displayName: 'Mac header check'
  
  - ${{ if contains(parameters.vmImage, 'Ubuntu') }}:
    - bash: |
        source activate cpp-py-bindgen && \
        cmake -B build -S "../$(OCP_src)" -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_STANDARD_LIBRARIES="$CONDA_PREFIX/lib/libvtkWrappingPythonCore-9.0.so.9.0.1" -DCMAKE_CXX_FLAGS=-I\ $CONDA_PREFIX/include/vtk-9.0 && \
        cmake --build build -j $(n_cores) -- -k 0 && \
        rm -rf build/CMakeFiles
      displayName: 'Compile'
      env:
        CXX: ${{ parameters.CXX }}

  - ${{ if contains(parameters.vmImage, 'mac') }}:
    - bash: |
        source activate cpp-py-bindgen && \
        cmake -B build -S "../$(OCP_src)" -G Ninja -DCMAKE_BUILD_TYPE=Debug && \
        cmake --build build -j $(n_cores) -- -k 0 && \
        rm -rf build/CMakeFiles
      displayName: 'Compile'
      env:
        CXX: "clang++"     

  - ${{ if contains(parameters.vmImage, 'win') }}:
    - script: |
        call "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\VC\\Auxiliary\\Build\\vcvars64.bat"
        call activate cpp-py-bindgen
        cmake -B build -S "../$(OCP_src)" -G Ninja -DCMAKE_BUILD_TYPE=Release -DPython3_FIND_STRATEGY=LOCATION -DPython3_ROOT_DIR=%CONDA_PREFIX%
        cmake --build build -j $(n_cores) -- -k 0
        rmdir /S /Q build\CMakeFiles
      displayName: 'Compile'
      env:
        CXX: "cl.exe"

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: 'build'
      artifactName: OCP_${{ parameters.vmImage }}
    displayName: 'Publish compilation result'

  - bash: |
      source activate cpp-py-bindgen && \
      cd build && \
      LD_DEBUG=libs python -c"import OCP"
    displayName: 'Test'
